shum@shum-asus:/tmp/shum$ ghci
GHCi, version 8.2.1: http://www.haskell.org/ghc/  :? for help
Prelude> :edit test.hs
Ok, 0 modules loaded.
Prelude> :e
No files to edit.
Prelude> :e test.hs 
Ok, 0 modules loaded.
Prelude> :load test.hs 
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, 1 module loaded.
*Main> :type addTwo 
addTwo :: Int -> Int -> Int
*Main> addTwo 1 3
4
*Main> addTwo 1

<interactive>:7:1: error:
    • No instance for (Show (Int -> Int)) arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
*Main> :t addTwo 1
addTwo 1 :: Int -> Int
*Main> :t (addTwo 1)
(addTwo 1) :: Int -> Int
*Main> (addTwo 1) 3
4
*Main> :e
[1 of 1] Compiling Main             ( test.hs, interpreted )

test.hs:3:1: error:
    • Couldn't match expected type ‘Int’
                  with actual type ‘(Int -> Int) -> Int -> Int’
    • The equation(s) for ‘addTwo’ have two arguments,
      but its type ‘(Int -> Int) -> Int’ has only one
  |
3 | addTwo x y = x + y
  | ^^^^^^^^^^^^^^^^^^
Failed, 0 modules loaded.
Prelude> :e
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, 1 module loaded.
*Main> :e
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, 1 module loaded.
*Main> addTwo id
4
*Main> addTwo (\x -> x * 2)
8
*Main> addTwo (* 2)
8
*Main> :t (*)
(*) :: Num a => a -> a -> a
*Main> :t (* 2)
(* 2) :: Num a => a -> a
*Main> (*) 1 2
2
*Main> (*) 4 2
8
*Main> f1 a b = a + b
*Main> f1 1 2
3
*Main> 1 `f1` 2
3
*Main> :m + Data.List
*Main Data.List> "hello" `isPrefixOf` "hello world"
True
*Main Data.List> addTwo (f1 1)
5
*Main Data.List> :e
Ok, 1 module loaded.
*Main Data.List> :e

[1]+  Stopped                 ghci
shum@shum-asus:/tmp/shum$ fg
ghci

[1]+  Stopped                 ghci
shum@shum-asus:/tmp/shum$ fg
ghci
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, 1 module loaded.
*Main Data.List> :e
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, 1 module loaded.
*Main Data.List> :l
Ok, 0 modules loaded.
Prelude Data.List> :l test.hs 
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, 1 module loaded.
*Main Data.List> :info Point 
data Point = MkPoint Int Int 	-- Defined at test.hs:2:1
instance [safe] Show Point -- Defined at test.hs:3:13
*Main Data.List> :t MkPoint
MkPoint :: Int -> Int -> Point
*Main Data.List> MkPoint 1 3
MkPoint 1 3
*Main Data.List> :type MkPoint 1 3
*Main Data.List> {0, 1, 2, ...} {0, 1, 2, ...}Main Data.List> {0, 1, 2, ...} {0, 1, 2,*Mai*Main Data.List> {(0, 1), (0, 1), (1,2), ...}*Main Data.List> :r
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, 1 module loaded.
*Main Data.List> MkPoint 1 3

<interactive>:37:1: error:
    • No instance for (Show Point) arising from a use of ‘print’
    • In a stmt of an interactive GHCi command: print it
*Main Data.List> show (MkPoint 1 3)

<interactive>:38:1: error:
    • No instance for (Show Point) arising from a use of ‘show’
    • In the expression: show (MkPoint 1 3)
      In an equation for ‘it’: it = show (MkPoint 1 3)
*Main Data.List> :r
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, 1 module loaded.
*Main Data.List> show (MkPoint 1 3)
"MkPoint 1 3"
*Main Data.List> :t show
show :: Show a => a -> String
*Main Data.List> :r
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, 1 module loaded.
*Main Data.List> Circle (MkPoint 0 0) 10
Circle (MkPoint 0 0) 10
*Main Data.List> :t Circle (MkPoint 0 0) 10
*Main Data.List> :t Rectangle (MkPoint 0 0) (MkPoint 1 1)
Rectangle (MkPoint 0 0) (MkPoint 1 1) :: Shape
*Main Data.List> :r
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, 1 module loaded.
*Main Data.List> moveByX 4 (MkPoint 0 0)
MkPoint 4 0
*Main Data.List> :t MkPoint 4 0
MkPoint 4 0 :: Point
*Main Data.List> :t moveByX 4 (MkPoint 0 0)
moveByX 4 (MkPoint 0 0) :: Point
*Main Data.List> :r
[1 of 1] Compiling Main             ( test.hs, interpreted )
Ok, 1 module loaded.
*Main Data.List> moveShapeByX 10 (Circle (MkPoint 0 0) 10)
Circle (MkPoint 10 0) 10
*Main Data.List> moveShapeByX 10 (Rectangle  (MkPoint 0 0) (MkPoint 1 1))
*** Exception: test.hs:(15,1)-(16,34): Non-exhaustive patterns in function moveShapeByX

*Main Data.List> :set -Wall
*Main Data.List> :r
[1 of 1] Compiling Main             ( test.hs, interpreted )

test.hs:15:1: warning: [-Wincomplete-patterns]
    Pattern match(es) are non-exhaustive
    In an equation for ‘moveShapeByX’:
        Patterns not matched: _ (Rectangle _ _)
   |
15 | moveShapeByX dx (Circle center r)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
Ok, 1 module loaded.
*Main Data.List> :r
[1 of 1] Compiling Main             ( test.hs, interpreted )
*Main Data.List> moveShapeByX 10 (Rectangle  (MkPoint 0 0) (MkPoint 1 1))
Rectangle (MkPoint 10 0) (MkPoint 11 1)
*Main Data.List> 

