shum@shum-asus:~/hsg/class4$ ghci
GHCi, version 8.2.1: http://www.haskell.org/ghc/  :? for help
Prelude> :l peano.hs 
[1 of 1] Compiling Main             ( peano.hs, interpreted )
Ok, 1 module loaded.
*Main> plus (S Z) Z
S Z
*Main> plus (S Z) (S Z)
S (S Z)
*Main> :t length 
length :: Foldable t => t a -> Int
*Main> :kind Maybe
Maybe :: * -> *
*Main> length (Just 1)
1
*Main> length (Nothing)
0
*Main> :l test1.hs
[1 of 1] Compiling Main             ( test1.hs, interpreted )
Ok, 1 module loaded.
*Main> Z

<interactive>:9:1: error:
    • No instance for (Show N) arising from a use of ‘print’
    • In a stmt of an interactive GHCi command: print it
*Main> toString Z
"Z"
*Main> toString (S Z)
"S Z"
*Main> toString (S (S Z))
"S S Z"
*Main> 
*Main> :r
[1 of 1] Compiling Main             ( test1.hs, interpreted )

test1.hs:16:16: error:
    • No instance for (ToString a) arising from a use of ‘toString’
      Possible fix:
        add (ToString a) to the context of the instance declaration
    • In the first argument of ‘(++)’, namely ‘toString h’
      In the second argument of ‘(++)’, namely
        ‘toString h ++ " " ++ toString t’
      In the expression: "Cons " ++ toString h ++ " " ++ toString t
   |
16 |     "Cons " ++ toString h ++ " " ++ toString t
   |                ^^^^^^^^^^
Failed, 0 modules loaded.
Prelude> :r
[1 of 1] Compiling Main             ( test1.hs, interpreted )
Ok, 1 module loaded.
*Main> Nil

<interactive>:16:1: error:
    • No instance for (Show (List a0)) arising from a use of ‘print’
    • In a stmt of an interactive GHCi command: print it
*Main> Cons Z Nil

<interactive>:17:1: error:
    • No instance for (Show (List N)) arising from a use of ‘print’
    • In a stmt of an interactive GHCi command: print it
*Main> toString (Cons Z Nil)
"Cons Z Nil"
*Main> toString (Cons Z (Cons (S Z) Nil))
"Cons Z Cons S Z Nil"
*Main> :r
[1 of 1] Compiling Main             ( test1.hs, interpreted )
Ok, 1 module loaded.
*Main> convert 10
S (S (S (S (S (S (S (S (S (S Z)))))))))
*Main> :t toString 
toString :: ToString a => a -> String
*Main> :i Show
class Show a where
  showsPrec :: Int -> a -> ShowS
  show :: a -> String
  showList :: [a] -> ShowS
  {-# MINIMAL showsPrec | show #-}
  	-- Defined in ‘GHC.Show’
instance [safe] Show N -- Defined at test1.hs:5:28
instance (Show b, Show a) => Show (Either a b)
  -- Defined in ‘Data.Either’
instance Show a => Show [a] -- Defined in ‘GHC.Show’
instance Show Word -- Defined in ‘GHC.Show’
instance Show Ordering -- Defined in ‘GHC.Show’
instance Show a => Show (Maybe a) -- Defined in ‘GHC.Show’
instance Show Integer -- Defined in ‘GHC.Show’
instance Show Int -- Defined in ‘GHC.Show’
instance Show Char -- Defined in ‘GHC.Show’
instance Show Bool -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j, Show k, Show l, Show m, Show n, Show o) =>
         Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j, Show k, Show l, Show m, Show n) =>
         Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j, Show k, Show l, Show m) =>
         Show (a, b, c, d, e, f, g, h, i, j, k, l, m)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j, Show k, Show l) =>
         Show (a, b, c, d, e, f, g, h, i, j, k, l)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j, Show k) =>
         Show (a, b, c, d, e, f, g, h, i, j, k)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j) =>
         Show (a, b, c, d, e, f, g, h, i, j)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i) =>
         Show (a, b, c, d, e, f, g, h, i)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h) =>
         Show (a, b, c, d, e, f, g, h)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f,
          Show g) =>
         Show (a, b, c, d, e, f, g)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f) =>
         Show (a, b, c, d, e, f)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e) =>
         Show (a, b, c, d, e)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d) => Show (a, b, c, d)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c) => Show (a, b, c)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b) => Show (a, b) -- Defined in ‘GHC.Show’
instance Show () -- Defined in ‘GHC.Show’
instance Show Float -- Defined in ‘GHC.Float’
instance Show Double -- Defined in ‘GHC.Float’
*Main> :r
[1 of 1] Compiling Main             ( test1.hs, interpreted )
Ok, 1 module loaded.
*Main> listToString [Z, S Z, S (S Z)]
["Z","S Z","S S Z"]
*Main> listToString [1, 3, 4]

<interactive>:26:1: error:
    • Ambiguous type variable ‘a0’ arising from a use of ‘listToString’
      prevents the constraint ‘(ToString a0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      These potential instances exist:
        instance [safe] ToString a => ToString (List a)
          -- Defined at test1.hs:13:10
        instance [safe] ToString N -- Defined at test1.hs:7:10
    • In the expression: listToString [1, 3, 4]
      In an equation for ‘it’: it = listToString [1, 3, 4]

<interactive>:26:15: error:
    • Ambiguous type variable ‘a0’ arising from the literal ‘1’
      prevents the constraint ‘(Num a0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      These potential instances exist:
        instance Num Integer -- Defined in ‘GHC.Num’
        instance Num Double -- Defined in ‘GHC.Float’
        instance Num Float -- Defined in ‘GHC.Float’
        ...plus two others
        ...plus six instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the expression: 1
      In the first argument of ‘listToString’, namely ‘[1, 3, 4]’
      In the expression: listToString [1, 3, 4]
*Main> listToString [1 :: Int, 3, 4]

<interactive>:27:1: error:
    • No instance for (ToString Int)
        arising from a use of ‘listToString’
    • In the expression: listToString [1 :: Int, 3, 4]
      In an equation for ‘it’: it = listToString [1 :: Int, 3, 4]
*Main> listToString [1 :: Int, 3, 4]
*Main> :r
[1 of 1] Compiling Main             ( test1.hs, interpreted )
Ok, 1 module loaded.
*Main> listToString' [1 :: Int, 3, 4]
["1","3","4"]
*Main> :r
[1 of 2] Compiling Peano            ( Peano.hs, interpreted )
[2 of 2] Compiling Main             ( test1.hs, interpreted )
Ok, 2 modules loaded.
*Main> listToString [Z, S Z, S (S Z)]
["Z","S Z","S S Z"]
*Main> :r
[2 of 2] Compiling Main             ( test1.hs, interpreted )

Peano.hs:7:13: error:
    Duplicate instance declarations:
      instance [safe] Show N -- Defined at Peano.hs:7:13
      instance Show N -- Defined at test1.hs:28:10
  |
7 |   deriving (Show)
  |             ^^^^
Failed, 1 module loaded.
*Peano> :r
[1 of 2] Compiling Peano            ( Peano.hs, interpreted )
[2 of 2] Compiling Main             ( test1.hs, interpreted )
Ok, 2 modules loaded.
*Main> :set -Wall
*Main> :r
Ok, 2 modules loaded.
*Main> :r
[2 of 2] Compiling Main             ( test1.hs, interpreted )

test1.hs:28:1: warning: [-Worphans]
    Orphan instance: instance Show N
    To avoid this
        move the instance declaration to the module of the class or of the type, or
        wrap the type with a newtype and declare the instance on the new type.
   |
28 | instance Show N where
   | ^^^^^^^^^^^^^^^^^^^^^...
Ok, 2 modules loaded.
*Main> :r
[2 of 2] Compiling Main             ( test1.hs, interpreted )

test1.hs:31:20: error:
    • Illegal instance declaration for ‘ToString a’
        (All instance types must be of the form (T a1 ... an)
         where a1 ... an are *distinct type variables*,
         and each type variable appears at most once in the instance head.
         Use FlexibleInstances if you want to disable this.)
    • In the instance declaration for ‘ToString a’
   |
31 | instance Show a => ToString a where
   |                    ^^^^^^^^^^
Failed, 1 module loaded.
*Peano> :r
[2 of 2] Compiling Main             ( test1.hs, interpreted )

test1.hs:13:24: error:
    • Illegal instance declaration for ‘ToString (List Int)’
        (All instance types must be of the form (T a1 ... an)
         where a1 ... an are *distinct type variables*,
         and each type variable appears at most once in the instance head.
         Use FlexibleInstances if you want to disable this.)
    • In the instance declaration for ‘ToString (List Int)’
   |
13 | instance ToString a => ToString (List Int) where
   |                        ^^^^^^^^^^^^^^^^^^^

test1.hs:31:20: error:
    • Illegal instance declaration for ‘ToString a’
        (All instance types must be of the form (T a1 ... an)
         where a1 ... an are *distinct type variables*,
         and each type variable appears at most once in the instance head.
         Use FlexibleInstances if you want to disable this.)
    • In the instance declaration for ‘ToString a’
   |
31 | instance Show a => ToString a where
   |                    ^^^^^^^^^^
Failed, 1 module loaded.
*Peano> :i Show
class Show a where
  showsPrec :: Int -> a -> ShowS
  show :: a -> String
  showList :: [a] -> ShowS
  {-# MINIMAL showsPrec | show #-}
  	-- Defined in ‘GHC.Show’
instance (Show b, Show a) => Show (Either a b)
  -- Defined in ‘Data.Either’
instance Show a => Show [a] -- Defined in ‘GHC.Show’
instance Show Word -- Defined in ‘GHC.Show’
instance Show Ordering -- Defined in ‘GHC.Show’
instance Show a => Show (Maybe a) -- Defined in ‘GHC.Show’
instance Show Integer -- Defined in ‘GHC.Show’
instance Show Int -- Defined in ‘GHC.Show’
instance Show Char -- Defined in ‘GHC.Show’
instance Show Bool -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j, Show k, Show l, Show m, Show n, Show o) =>
         Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j, Show k, Show l, Show m, Show n) =>
         Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j, Show k, Show l, Show m) =>
         Show (a, b, c, d, e, f, g, h, i, j, k, l, m)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j, Show k, Show l) =>
         Show (a, b, c, d, e, f, g, h, i, j, k, l)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j, Show k) =>
         Show (a, b, c, d, e, f, g, h, i, j, k)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i, Show j) =>
         Show (a, b, c, d, e, f, g, h, i, j)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h, Show i) =>
         Show (a, b, c, d, e, f, g, h, i)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g,
          Show h) =>
         Show (a, b, c, d, e, f, g, h)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f,
          Show g) =>
         Show (a, b, c, d, e, f, g)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e, Show f) =>
         Show (a, b, c, d, e, f)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d, Show e) =>
         Show (a, b, c, d, e)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c, Show d) => Show (a, b, c, d)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b, Show c) => Show (a, b, c)
  -- Defined in ‘GHC.Show’
instance (Show a, Show b) => Show (a, b) -- Defined in ‘GHC.Show’
instance Show () -- Defined in ‘GHC.Show’
instance Show Float -- Defined in ‘GHC.Float’
instance Show Double -- Defined in ‘GHC.Float’
*Peano> class Show a where
*Peano>   showsPrec :: Int -> a -> ShowS

<interactive>:41:3: error:
    • No instance for (Prelude.Show a1)
        arising from a use of ‘showsPrec’
      Possible fix:
        add (Prelude.Show a1) to the context of
          an expression type signature:
            forall a1. Int -> a1 -> ShowS
    • In the expression: showsPrec :: Int -> a -> ShowS
      In an equation for ‘it’: it = showsPrec :: Int -> a -> ShowS
*Peano>   show :: a -> String

<interactive>:42:3: error:
    • No instance for (Prelude.Show a1) arising from a use of ‘show’
      Possible fix:
        add (Prelude.Show a1) to the context of
          an expression type signature:
            forall a1. a1 -> String
    • In the expression: show :: a -> String
      In an equation for ‘it’: it = show :: a -> String
*Peano> :i Read
class Read a where
  readsPrec :: Int -> ReadS a
  readList :: ReadS [a]
  GHC.Read.readPrec :: Text.ParserCombinators.ReadPrec.ReadPrec a
  GHC.Read.readListPrec :: Text.ParserCombinators.ReadPrec.ReadPrec
                             [a]
  {-# MINIMAL readsPrec | readPrec #-}
  	-- Defined in ‘GHC.Read’
instance Read a => Read [a] -- Defined in ‘GHC.Read’
instance Read Word -- Defined in ‘GHC.Read’
instance Read Ordering -- Defined in ‘GHC.Read’
instance Read a => Read (Maybe a) -- Defined in ‘GHC.Read’
instance Read Integer -- Defined in ‘GHC.Read’
instance Read Int -- Defined in ‘GHC.Read’
instance Read Float -- Defined in ‘GHC.Read’
instance Read Double -- Defined in ‘GHC.Read’
instance Read Char -- Defined in ‘GHC.Read’
instance Read Bool -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d, Read e, Read f, Read g,
          Read h, Read i, Read j, Read k, Read l, Read m, Read n, Read o) =>
         Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d, Read e, Read f, Read g,
          Read h, Read i, Read j, Read k, Read l, Read m, Read n) =>
         Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d, Read e, Read f, Read g,
          Read h, Read i, Read j, Read k, Read l, Read m) =>
         Read (a, b, c, d, e, f, g, h, i, j, k, l, m)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d, Read e, Read f, Read g,
          Read h, Read i, Read j, Read k, Read l) =>
         Read (a, b, c, d, e, f, g, h, i, j, k, l)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d, Read e, Read f, Read g,
          Read h, Read i, Read j, Read k) =>
         Read (a, b, c, d, e, f, g, h, i, j, k)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d, Read e, Read f, Read g,
          Read h, Read i, Read j) =>
         Read (a, b, c, d, e, f, g, h, i, j)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d, Read e, Read f, Read g,
          Read h, Read i) =>
         Read (a, b, c, d, e, f, g, h, i)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d, Read e, Read f, Read g,
          Read h) =>
         Read (a, b, c, d, e, f, g, h)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d, Read e, Read f,
          Read g) =>
         Read (a, b, c, d, e, f, g)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d, Read e, Read f) =>
         Read (a, b, c, d, e, f)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d, Read e) =>
         Read (a, b, c, d, e)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c, Read d) => Read (a, b, c, d)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b, Read c) => Read (a, b, c)
  -- Defined in ‘GHC.Read’
instance (Read a, Read b) => Read (a, b) -- Defined in ‘GHC.Read’
instance Read () -- Defined in ‘GHC.Read’
instance (Read b, Read a) => Read (Either a b)
  -- Defined in ‘Data.Either’
*Peano> :i read
read :: Read a => String -> a 	-- Defined in ‘Text.Read’
*Peano> :i show
class Prelude.Show a where
  ...
  show :: a -> String
  ...
  	-- Defined in ‘GHC.Show’
*Peano> :r
[1 of 2] Compiling Peano            ( Peano.hs, interpreted )
[2 of 2] Compiling Main             ( test1.hs, interpreted )
Ok, 2 modules loaded.
*Main> read "

<interactive>:47:7: error:
    lexical error in string/character literal at end of input
*Main> read "S Z"

<interactive>:48:1: warning: [-Wtype-defaults]
    • Defaulting the following constraints to type ‘()’
        (Show a0) arising from a use of ‘print’ at <interactive>:48:1-10
        (Read a0) arising from a use of ‘it’ at <interactive>:48:1-10
    • In a stmt of an interactive GHCi command: print it
*** Exception: Prelude.read: no parse
*Main> :set -Wno-d
-Wno-default
-Wno-deferred-out-of-scope-variables
-Wno-deferred-type-errors
-Wno-deprecated-flags
-Wno-deprecations
-Wno-deriving-typeable
-Wno-dodgy-exports
-Wno-dodgy-foreign-imports
-Wno-dodgy-imports
-Wno-duplicate-exports
*Main> :set -Wno-de
-Wno-default
-Wno-deferred-out-of-scope-variables
-Wno-deferred-type-errors
-Wno-deprecated-flags
-Wno-deprecations
-Wno-deriving-typeable
*Main> :set -Wno-default 
*Main> read "S Z"

<interactive>:50:1: warning: [-Wtype-defaults]
    • Defaulting the following constraints to type ‘()’
        (Show a0) arising from a use of ‘print’ at <interactive>:50:1-10
        (Read a0) arising from a use of ‘it’ at <interactive>:50:1-10
    • In a stmt of an interactive GHCi command: print it
*** Exception: Prelude.read: no parse
*Main> :t read "S Z"
read "S Z" :: Read a => a
*Main> read "S Z" :: Int
*** Exception: Prelude.read: no parse
*Main> read "S Z" :: N
S Z
*Main> read "S Z" :: Int
*** Exception: Prelude.read: no parse
*Main> plus (read "S Z") Z
S Z
*Main> plus (read "S Z") (S Z)
S (S Z)
*Main> (read . show) Z

<interactive>:57:1: warning: [-Wtype-defaults]
    • Defaulting the following constraints to type ‘()’
        (Show a0) arising from a use of ‘print’ at <interactive>:57:1-15
        (Read a0) arising from a use of ‘it’ at <interactive>:57:1-15
    • In a stmt of an interactive GHCi command: print it
*** Exception: Prelude.read: no parse
*Main> (read . show) Z :: N
Z
*Main> (read . show) (S Z) :: N
S Z
*Main> show (S Z)
"S Z"
*Main> :i Num
class Num a where
  (+) :: a -> a -> a
  (-) :: a -> a -> a
  (*) :: a -> a -> a
  negate :: a -> a
  abs :: a -> a
  signum :: a -> a
  fromInteger :: Integer -> a
  {-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}
  	-- Defined in ‘GHC.Num’
instance Num Word -- Defined in ‘GHC.Num’
instance Num Integer -- Defined in ‘GHC.Num’
instance Num Int -- Defined in ‘GHC.Num’
instance Num Float -- Defined in ‘GHC.Float’
instance Num Double -- Defined in ‘GHC.Float’
*Main> 3.4 + 1.2

<interactive>:62:1: warning: [-Wtype-defaults]
    • Defaulting the following constraints to type ‘Double’
        (Show a0) arising from a use of ‘print’ at <interactive>:62:1-9
        (Fractional a0) arising from a use of ‘it’ at <interactive>:62:1-9
    • In a stmt of an interactive GHCi command: print it
4.6
*Main> 3.4 + 1.2 :: Double
4.6
*Main> :i Monoid
class Monoid a where
  mempty :: a
  mappend :: a -> a -> a
  mconcat :: [a] -> a
  {-# MINIMAL mempty, mappend #-}
  	-- Defined in ‘GHC.Base’
instance Monoid [a] -- Defined in ‘GHC.Base’
instance Monoid Ordering -- Defined in ‘GHC.Base’
instance Monoid a => Monoid (Maybe a) -- Defined in ‘GHC.Base’
instance Monoid a => Monoid (IO a) -- Defined in ‘GHC.Base’
instance Monoid b => Monoid (a -> b) -- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b, Monoid c, Monoid d, Monoid e) =>
         Monoid (a, b, c, d, e)
  -- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b, Monoid c, Monoid d) =>
         Monoid (a, b, c, d)
  -- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b, Monoid c) => Monoid (a, b, c)
  -- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b) => Monoid (a, b)
  -- Defined in ‘GHC.Base’
instance Monoid () -- Defined in ‘GHC.Base’
*Main> mempty :: [Int]
[]
*Main> mappend [1, 3] [6, 6]

<interactive>:66:1: warning: [-Wtype-defaults]
    • Defaulting the following constraints to type ‘Integer’
        (Show a0) arising from a use of ‘print’ at <interactive>:66:1-21
        (Num a0) arising from a use of ‘it’ at <interactive>:66:1-21
    • In a stmt of an interactive GHCi command: print it
[1,3,6,6]
*Main> mappend [1, 3] [6, 6] :: [Int]
[1,3,6,6]
*Main> mempty :: Maybe [a]

<interactive>:68:1: warning: [-Wtype-defaults]
    • Defaulting the following constraint to type ‘()’
        Show a0 arising from a use of ‘print’
    • In a stmt of an interactive GHCi command: print it
Nothing
*Main> mempty :: Maybe [Int]
Nothing
*Main> mappend Nothing (Just []) :: Maybe [Int]
Just []
*Main> mappend (Just []) Nothing :: Maybe [Int]
Just []
*Main> mappend (Just []) (Just [1]) :: Maybe [Int]
Just [1]
*Main> mappend (Just [3]) (Just [1]) :: Maybe [Int]
Just [3,1]
*Main> mappend (Just [1, 2]) (Just [3, 4]) :: Maybe [Int]
Just [1,2,3,4]
*Main> :i S
S       Show    ShowS   String
*Main> :m + Data.Monoid 
*Main Data.Monoid> :i Sum 
newtype Sum a = Sum {getSum :: a} 	-- Defined in ‘Data.Monoid’
instance Applicative Sum -- Defined in ‘Data.Monoid’
instance Eq a => Eq (Sum a) -- Defined in ‘Data.Monoid’
instance Functor Sum -- Defined in ‘Data.Monoid’
instance Monad Sum -- Defined in ‘Data.Monoid’
instance Num a => Monoid (Sum a) -- Defined in ‘Data.Monoid’
instance Ord a => Ord (Sum a) -- Defined in ‘Data.Monoid’
instance Show a => Show (Sum a) -- Defined in ‘Data.Monoid’
instance Read a => Read (Sum a) -- Defined in ‘Data.Monoid’
instance Num a => Num (Sum a) -- Defined in ‘Data.Monoid’
instance Foldable Sum -- Defined in ‘Data.Foldable’
instance Bounded a => Bounded (Sum a) -- Defined in ‘Data.Monoid’
instance Traversable Sum -- Defined in ‘Data.Traversable’
*Main Data.Monoid> mempty :: Sum Int
Sum {getSum = 0}
*Main Data.Monoid> mappend (Sum 4) (Sum 5) :: Sum Int
Sum {getSum = 9}
*Main Data.Monoid> :i Product 
newtype Product a = Product {getProduct :: a}
  	-- Defined in ‘Data.Monoid’
instance Applicative Product -- Defined in ‘Data.Monoid’
instance Eq a => Eq (Product a) -- Defined in ‘Data.Monoid’
instance Functor Product -- Defined in ‘Data.Monoid’
instance Monad Product -- Defined in ‘Data.Monoid’
instance Num a => Monoid (Product a) -- Defined in ‘Data.Monoid’
instance Ord a => Ord (Product a) -- Defined in ‘Data.Monoid’
instance Show a => Show (Product a) -- Defined in ‘Data.Monoid’
instance Read a => Read (Product a) -- Defined in ‘Data.Monoid’
instance Num a => Num (Product a) -- Defined in ‘Data.Monoid’
instance Foldable Product -- Defined in ‘Data.Foldable’
instance Bounded a => Bounded (Product a)
  -- Defined in ‘Data.Monoid’
instance Traversable Product -- Defined in ‘Data.Traversable’
*Main Data.Monoid> mappend (Product 4) (Product 5) :: Product Int
Product {getProduct = 20}
*Main Data.Monoid> 

